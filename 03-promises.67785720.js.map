{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAoBcQ,SAASC,cAAc,mBAC/BC,iBAAiB,SAAS,SAAAC,GACrCA,EAAEC,iBAlBqB,SAACZ,EAAOa,EAAMC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IAC1BjB,EAAciB,EAAGf,EAAQa,EAAOE,GAC7BC,MAAK,SAAAC,G,OACJrB,EAAAsB,OAAQC,QACN,qBAA8CC,OAAzBH,EAAMlB,SAAW,EAAE,QAAkBqB,OAAZH,EAAMjB,MAAM,M,IAG7DqB,OAAM,SAAAC,G,OACL1B,EAAAsB,OAAQK,QACN,oBAA6CH,OAAzBE,EAAMvB,SAAW,EAAE,QAAkBqB,OAAZE,EAAMtB,MAAM,M,IAYjEwB,CAHmBC,OAAOjB,SAASC,cAAc,kBAAkBQ,OACjDQ,OAAOjB,SAASC,cAAc,iBAAiBQ,OAC3CQ,OAAOjB,SAASC,cAAc,mBAAmBQ,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify as Notifly } from 'notiflix';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst generatePromises = (delay, step, amount) => {\n  for (let i = 0; i < amount; i++) {\n    createPromise(i, delay + step * i)\n      .then(value =>\n        Notifly.success(\n          `Fulfilled promise ${value.position + 1} in ${value.delay}ms`\n        )\n      )\n      .catch(error =>\n        Notifly.failure(\n          `Rejected promise ${error.position + 1} in ${error.delay}ms`\n        )\n      );\n  }\n};\n\nconst submitButton = document.querySelector('[type=\"submit\"]');\nsubmitButton.addEventListener('click', e => {\n  e.preventDefault();\n  const firstDelay = Number(document.querySelector('[name=\"delay\"]').value);\n  const delayStep = Number(document.querySelector('[name=\"step\"]').value);\n  const promiseAmount = Number(document.querySelector('[name=\"amount\"]').value);\n  generatePromises(firstDelay, delayStep, promiseAmount);\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","step","amount","i","then","value","Notify","success","concat","catch","error","failure","$ce04d3a99e08e73b$var$generatePromises","Number"],"version":3,"file":"03-promises.67785720.js.map"}